'use strict';
const juice = require('juice');

class ReplaceResourceWebpackPlugin {
    constructor(options) {
        this.options = {
            inlineCss: false,
            inlineCssOptions: {},
            rules_replace: [],
        };
        Object.assign(this.options, options || {});
    }

    apply(compiler){
        const self = this;

        compiler.hooks.compilation.tap('ReplaceResourceWebpackPlugin', (compilation) => {
            compilation.hooks.htmlWebpackPluginAfterHtmlProcessing.tapAsync('ReplaceResourceWebpackPlugin', (data, callback) => {
                data = self.renderAssets(compilation, data, callback);
                if(self.options.inlineCss) {
                    data.html = juice(data.html, self.options.inlineCssOptions);
                }

                data.html = self.someReplace(data.html);
                callback(null, data);
            });

            compilation.hooks.htmlWebpackPluginBeforeHtmlProcessing.tapAsync('ReplaceResourceWebpackPlugin', (data, callback) => {
                if(self.options.inlineCss) {
                    data.html = self.removeLinks(data.html);
                }
                callback(null, data);
            });
        });
    }

    renderAssets(compilation, data, callback){
        var assets = {};
        var foldersToCss = this.options.foldersToCss || [];

        Object.keys(compilation.assets).forEach(function(versioned){
            var sections = versioned.split('.');
            sections.splice(sections.length-2, 1);

            if(sections[sections.length-1] == 'css'){
                sections[sections.length-1] = 'scss';
            }
            var original = sections.join('.');
            assets[original] = versioned;
        });


        data.html = data.html.replace(/!{3}ASSET[0-9\.]+:[^!]+!{3}/gm, function(match){
            var file = match.replace(/!{3}ASSET[0-9\.]+:([^!]+)!{3}/, '$1');
            var file_win = file.replace('/', '\\');

            if(assets[file]){
                return data.assets.publicPath + assets[file];
            }
            else if(assets[file_win]){
                return data.assets.publicPath + assets[file_win].replace(/\\/g, '/')
            }

            return data.assets.publicPath + file;
        });

        return data;
    }

    removeLinks(html){
        return html.replace(/<link[^>]+rel=("|')stylesheet\1[^>]*>/g, '');
    }

    someReplace(html){
        if(!Array.isArray(this.options.rules_replace) || !this.options.rules_replace.length){
            return html;
        }

        this.options.rules_replace.forEach(rule => {
            html = html.replace(new RegExp(rule.open_replace, 'g'), rule.open_tag)
                .replace(new RegExp(rule.close_replace, 'g'), rule.close_tag);
        });

        return html;
    }
}

module.exports = ReplaceResourceWebpackPlugin;