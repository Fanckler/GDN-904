'use strict';
const Twig = require("@alldigitalads/nodejs_modules-twigjs-fork");
const _ = require('lodash');
const mapcache = require("./mapcache");
const hashGenerator = require("hasha");
const fs = require('fs');

const FormWidget = require('../templates/form_widget');
const FormStart = require('../templates/form_start');
const FormEnd = require('../templates/form_end');
const FormErrors = require('../templates/form_errors');
const FormRest = require('../templates/form_rest');
const FormRow = require('../templates/form_row');
const FormLabel = require('../templates/form_label');

Twig.cache(false);

class FormGenerator{
    constructor(){
        this.needLoadTemplate = true;
        this.Twig = Twig;
        this.formTemplate = '../templates/form_div_layout';
        this.init();

        Object.defineProperties(this, {
            Twig: {enumerable: false},
        });
    }

    form(form, options={}){
        let twig = this.start(form, options);
        twig += this.widget(form);
        twig += this.end(form);
        return twig;
    }

    row(field, options={}){
        if(field.type == 'hidden'){
            return this.widget(field, options);
        }
        if(options.attr){
            Object.assign(field.vars.attr, options.attr);
        }
        let twig = (new FormRow(field, this)).render();
        return twig;
    }

    start(form, options={}){
        if(Array.isArray(form.vars.attr)){
            form.vars.attr = {};
        }

        if(options.attr){
            Object.assign(form.vars.attr, options.attr);
        }

        let twig = (new FormStart(form, this)).render();

        return twig;
    }

    end(form, options={}){
        if(options.renderRest !== undefined){
            form.renderRest = options.renderRest;
        }
        let twig = (new FormEnd(form, this)).render();
        return twig;
    }

    errors(field){
        return (new FormErrors(field, this)).render();
    }

    rest(form){
        let twig = (new FormRest(form, this)).render();
        return twig;
    }

    label(field, label=null, options={}){
        if(label){
            field.vars.label = label;
        }

        if(options.label_attr){
            Object.assign(field.vars.label_attr, options.label_attr);
        }
        let twig = (new FormLabel(field, this)).render();
        return twig;
    }

    widget(field, options={}){
        if(options.attr){
            Object.assign(field.vars.attr, options.attr);
        }
        let twig = (new FormWidget(field, this)).render();
        field.rendered = true;
        return twig;
    }

    init(){
        let self = this;
        this.Twig.extendFunction('form_widget', (field, options) => {
            return makeup(self.renderBlock(self.widget(field, options)))
        });

        this.Twig.extendFunction('form_start', (form, options) => {
            return makeup(self.renderBlock(self.start(form, options || {})));
        });

        this.Twig.extendFunction('form_end', (form, options) => {
            return makeup(self.renderBlock(self.end(form, options)));
        });

        this.Twig.extendFunction('form_errors', (element) => {
            return makeup(self.renderBlock(self.errors(element)));
        });

        this.Twig.extendFunction('form_label', (element, label, options) => {
            return makeup(self.renderBlock(self.label(element, label, options)));
        });

        this.Twig.extendFunction('form_rest', (form) => {
            return makeup(self.renderBlock(self.rest(form)));
        });

        this.Twig.extendFunction('form', (form, options) => {
            return makeup(self.renderBlock(self.form(form, options)));
        });

        this.Twig.extendFunction('form_row', (field, options) => {
            return makeup(self.renderBlock(self.row(field, options)));
        });

        this.Twig.extendFilter('humanize', (text) => {
            return humanize(text);
        });

        this.Twig.extendFilter('form_encode_currency', (text) => {
            return text;
        });
    }

    renderBlock(source){
        let id = hashGenerator(source);

        mapcache.set(id, source);

        let tpl = Twig.twig({
            id: id,
            data: source,
            allowInlineIncludes: true,
            autoescape: true
        });

        let html = tpl.render({});
        return html;
    }

    humanize(text){
        //ucfirst(strtolower(trim(preg_replace(array('/([A-Z])/', '/[_\s]+/'), array('_$1', ' '), $text))))
        text = text.replace(/([A-Z])/g, '_$1').replace(/[_\s]+/g, ' ')
            .replace(/^\s+/, '')
            .replace(/\s+$/, '').toLowerCase();
        text = text.charAt(0).toUpperCase() + text.slice(1);
        return text;
    }
}


/*
 * Private methods
 */

let makeup = (context) => {
    let output = new String(context);
    output.twig_markup = true;
    return output;
}

let render

module.exports = FormGenerator;