var Twig = require("@alldigitalads/nodejs_modules-twigjs-fork");
var loaderUtils = require("loader-utils");
var path = require("path");
var hashGenerator = require("hasha");
var glob = require('glob');
var fs = require('fs');
var mapcache = require("./mapcache");

const Assets = new (require('./twig_assets'))();
const FormGenerator = new (require('./form_generator2'))(Twig);
const FormView = require('./form_view.js');

Twig.cache(false);

Twig.extendFunction('asset', (path) => {return Assets.asset(path);});


module.exports = function(source) {
    if (this.cacheable) {
        this.cacheable();
    }

    var loaderOptions = loaderUtils.getOptions(this) || {};

    var rules = {};
    if(typeof loaderOptions.routerRules == 'string'){
        delete require.cache[loaderOptions.routerRules];
        rules = require(loaderOptions.routerRules);
    }
    else if (typeof loaderOptions.routerRules == 'object'){
        rules = loaderOptions.routerRules;
    }
    const Router = new (require('./twig_router'))({
        rules: rules,
        domain: loaderOptions.domain || null
    });

    var messages = loaderOptions.transMessages;
    if(typeof loaderOptions.transMessages == 'string'){
        delete require.cache[loaderOptions.transMessages];
        messages = require(loaderOptions.transMessages);
    }

    const Translator = new (require('./twig_translator'))({
        messages: messages
    });

    var templateRoot = loaderOptions.templateRoot ? path.resolve(loaderOptions.templateRoot) : this.context;
    var dataRoot = loaderOptions.testDataRoot ? path.resolve(loaderOptions.testDataRoot) : this.context;
    var fixtures = loaderOptions.fixtures || {};
    var file = require.resolve(this.resource),
        id = hashGenerator(file),
        tpl, assets={};

    var relativePath = file.replace(templateRoot, '');


    Twig.extendFunction('path', (name, params) => {return Router.getPath(name, params);});
    Twig.extendFunction('absolute_url', (path) =>{return Router.getAbsoluteUrl(path);});
    Twig.extendFunction('url', (name, params) => {return Router.getUrl(name, params);});
    Twig.extendFilter('trans', (code, args) => {
        return Translator.trans(code, args[0] || {}, args[1] || null, args[2] || null);
    });

    mapcache.set(id, file);

    this.cacheable && this.cacheable();

    tpl = Twig.twig({
        id: id,
        path: file,
        data: source,
        allowInlineIncludes: true,
        autoescape: true
        // debug: true,
        // trace: true
    });

    if(typeof fixtures == 'string'){
        fixtures = require(fixtures);
    }
    else if(Object.keys(fixtures).length == 0){
        fixtures = loadTestData(relativePath, dataRoot);
    }

    fixtures.app = {};
    fixtures.app.request = {
        getLocale: () => {
            return fixtures._locale || 'en';
        }
    }

    var source = JSON.stringify(tpl.render(fixtures));
    return 'module.exports='+source+';';
};

function loadTestData(file, dataRoot){
    try {

        file = dataRoot + (file.replace(/html\.twig$/, 'js'));

        let modules = {},
            jsonDir = dataRoot + '/json/';

        if(fs.existsSync(jsonDir)) {
            for (let child of fs.readdirSync(jsonDir)) {
                if (child) {
                    delete require.cache[path.join(jsonDir, child)];
                    var key = child.replace(/(\.json|\.\/)/gi, '').replace(/-/g, '_');
                    var obj = new FormView(require(path.join(jsonDir, child)));
                    modules[key] = obj;
                }
            }
        }

        if(fs.existsSync(file)) {
            delete require.cache[file];
            modules = Object.assign(modules, require(file))
        }

        return modules;
    }
    catch (e) {
        if(e.code == 'MODULE_NOT_FOUND'){
            return {};
        }

        console.error(e.toString());
    }
}
