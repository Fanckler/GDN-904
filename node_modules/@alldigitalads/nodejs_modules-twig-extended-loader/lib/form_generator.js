'use strict';

const _ = require('lodash');
var allowedFieldTypes = [
    'text', 'textarea', 'email', 'password', 'checkbox',
    'radio', 'integer', 'number', 'choice', 'submit', 'reset'
];

/**
 * Deprecated
 *
 * @deprecated
 */
class FormGenerator{
    constructor(options){
        this.tag_form = null;
        this.render_complete = [];
        this.prohibited_field_id = ['action', 'method', 'errors', 'attr'];
    }

    form(form, options){
        var str = '';
        str += this.start(form, options);
        str += '<div id="form">';
        str += this.rest(form);
        str += '</div>';
        str += this.end(form, options);

        return str;
    }

    row(field, options){
        var str = '<div>';
        str += this.label(field, options);
        str += this.errors(field);
        str += this.widget(field, options);
        str += '</div>';

        return str;
    }

    start(form, options){
        this.tag_form = new TagForm(form, options);

        return this.tag_form.openTag();
    }

    end(form){
        if(!this.tag_form){
            throw new Error('Use "form_end" without "form_start"');
        }

        // return this.rest(form) + close_tag;
        return this.tag_form.closeTag();
    }

    errors(element){
        if(!element.vars || !element.vars.errors || element.vars.errors.length == 0){
            return '';
        }

        var str = '<ul>';
        element.vars.errors.forEach(function(error){
            str += '<li>'+error.message+'</li>';
        });
        str += '</ul>';
        return str;
    }

    rest(form){
        var self = this;
        var str = '';
        Object.keys(form).forEach(function(element){
            if(
                !(!!form[element])
                || !form[element].vars
                || !form[element].vars.block_prefixes[1]
            ){
                return;
            }

            if(element != 'submit' && element != 'reset') {
                str += self.row(form[element]);
            }
            else {
                str += self.widget(form[element]);
            }
        });
        return str;
    }

    label(field, label=null, options={}){
        if(field.vars.block_prefixes[0] != 'form'){
            return '';
        }

        var for_id = field.vars.id;
        var text = label || field.vars.label || humanize(field.vars.name); //Первый символ большими
        var str = '<label for="'+for_id+'" ';
        var label_class = '';
        if(options.label_attr){
            delete options.label_attr['for'];
            if(options.label_attr.class){
                label_class = options.label_attr.class;
                delete options.label_attr['class'];
            }
        }

        if(field.vars.required !== false){
            label_class += ' required';
        }
        str += `class="${label_class}" `;

        if(options.label_attr){
            delete options.label_attr['_keys'];
            Object.keys(options.label_attr).forEach(key => {
                str += `${key}="${options.label_attr[key]}" `
            });
        }

        str += '>' + text + '</label>';
        return str;
    }

    widget(field, options){
        if(!field || !field.vars){
            throw new Error('Field is undefined or incorrect');
        }

        var types = field.vars.block_prefixes.slice();
        types.reverse();

        var field_type = 'text';
        types.some(type => {
            if(allowedFieldTypes.indexOf(type) !== -1){
                field_type = type;
                return true;
            }
        });

        this.render_complete.push(field.vars.id);
        switch (field_type) {
            case 'text':
            case 'textarea':
            case 'email':
            case 'password':
            case 'checkbox':
            case 'radio':
                return (new TagInput(field, options, field_type)).render();
                break;
            case 'integer':
            case 'number':
                field.type = 'number';
                return (new TagInput(field, options, field_type)).render();
                break;
            case 'choice':
                return (new TagSelect(field, options)).render();
                break;
            case 'submit':
            case 'reset':
                return (new TagButton(field, options)).render();
        }
    }
}


/*
 *  Tag <form>
 */
class TagForm{
    constructor(form, options)
    {
        options = options || {};
        this.form = form;
        this.options = {
            id: null,
            method: options.method || form.vars.method || 'post',
            action: options.action || form.vars.action,
            name: form.vars.name,
            div_id: 'form',
            div_name: null
        };
        this.attr_add = {};
        this._html = '';
        this._div = '';

        var self = this;
        Object.keys(form.vars.attr).forEach(function (key) {
            switch (key) {
                case 'id':
                    self.options.id = form.vars.attr[key];
                    break;
                case 'name':
                    self.options.div_name = form.vars.attr[key];
                    break;
                case '_keys':
                    break;
                default:
                    self.attr_add[key] = form.vars.attr[key];
                    break;
            }
        });

        if (options.attr) {
            Object.keys(options.attr).forEach(function (key) {
                switch (key) {
                    case 'id':
                        self.options.id = options['attr'][key];
                        break;
                    case 'name':
                        self.options.div_name = options['attr'][key];
                        break;
                    case '_keys':
                        break;
                    default:
                        self.attr_add[key] = options['attr'][key];
                        break;
                }
            });
        }
    }

    openTag(){
        this._html += '<form name="'+this.options.name+'" method="'+this.options.method+'" ';

        if(this.options.id){
            this._html += 'id="'+this.options.id+'" ';
        }

        if(this.options.action){
            this._html += 'action="'+this.options.action+'" ';
        }

        var self = this;
        Object.keys(this.attr_add).forEach(function(key){
            if(key == '_keys'){
                return;
            }
            self._html += key+'="'+self.attr_add[key]+'" ';
        });

        this._html +='>';
        return this._html;
    }

    closeTag(){
        return '</form>';
    }
};


/*
 * Tag <input>, <textarea>
 */
class TagInput{
    constructor(field, options={}, defaultType='test'){
        this.field = field;
        this.options = {
            id: options && options.id ? options.id : field.vars.id,
            type: defaultType,
            name: field.vars.full_name,
            value: field.vars.value || '',
            required: field.vars.required,
            checked: field.vars.checked || false,
            additional: _.merge({}, field.vars.attr, options.attr)
        };

        if(this.options.additional.required === false){
            this.options.required = false;
            delete this.options.additional['required'];
        }

        if(this.options.additional.checked !== undefined){
            this.options.checked = this.options.additional.checked;
            delete this.options.additional['checked'];
        }
    }

    render(){
        switch (this.options.type){
            case 'textarea':
                return this.renderTextArea();
                break;
            case 'checkbox':
                return this.renderCheckbox();
                break;
            case 'radio':
                return this.renderRadio();
                break;
            default:
                return this.renderText();
                break;
        }
    }

    renderText(){
        if(this.options.type == 'number' && this.options.additional.min){
            this.options.value = this.options.value ||  this.options.additional.min;
        }

        var str = '<input type="' + this.options.type+'" '
            + 'id="' + this.options.id + '" '
            + 'name="' + this.field.vars.full_name + '" '
            + 'value="' + this.field.vars.value + '" ';

        if(this.options.required){
            str += 'required="required" ';
        }

        var additional = this.options.additional;
        delete additional['_keys'];
        Object.keys(additional).forEach(function(key){
            str += key + '="' + additional[key] + '" ';
        });

        return str + '/>';
    }

    renderTextArea(){
        var str = '<textarea '
            + 'id="' + this.options.id + '" '
            + 'name="' + this.field.vars.full_name + '" ';

        if(this.options.required){
            str += 'required="required" ';
        }

        var additional = this.options.additional;
        Object.keys(additional).forEach(function(key){
            if(key == '_keys'){
                return;
            }
            str += key + '="' + additional[key] + '" ';
        });

        return str + '>' + this.options.value + '</textarea>';
    }

    renderCheckbox(){
        var str = '<input type="' + this.options.type+'" '
            + 'id="' + this.options.id + '" '
            + 'name="' + this.options.name + '" '
            + 'value="' + this.options.value + '" ';

        if(this.options.required){
            str += 'required="required" ';
        }

        if(this.options.checked){
            str += 'checked="checked" ';
        }

        var additional = this.options.additional;
        Object.keys(additional).forEach(function(key){
            if(key == '_keys'){
                return;
            }
            str += key + '="' + additional[key] + '" ';
        });

        return str + '/>';
    }

    renderRadio(){
        return this.renderCheckbox();
    }
}


/*
 * Tag <select>
 */
class TagSelect{
    constructor(field, options={}){
        this.field = field;
        this.options = {
            id: options && options.id ? options.id : field.vars.id,
            name: field.vars.full_name,
            choices: field.vars.choices || {},
            required: field.vars.required,
            additional: _.merge({}, field.vars.attr, options.attr)
        };
        this.selected = field.vars.value;

        if(Array.isArray(this.selected)){
            this.selected = this.selected.map(val => {
                return typeof val == 'number' ? val.toString() : val;
            })
        }

        if(this.options.additional.required === false){
            this.options.required = false;
            delete this.options.additional['required'];
        }
    }

    render(){
        if(this.field.vars.expanded){
            return this.renderExpanded();
        }

        var str = '<select id="' + this.options.id +'" '
            + 'name="' + this.options.name + '" ';

        if(this.options.required){
            str += 'required="required" ';
        }

        if(this.field.vars.multiple){
            str += 'multiple="multiple" ';
        }

        var additional = this.options.additional;
        delete additional['_keys'];
        Object.keys(additional).forEach(function(key){
            if(key == 'multiple' && additional[key] === true){
                additional[key] = 'multiple';
            }
            str += key + '="' + additional[key] + '" ';
        });
        str += ">";

        var option_str = '';

        var choices = this.options.choices;
        var self = this;
        delete choices['_keys'];
        Object.keys(choices).forEach(function(index){
            var val = typeof choices[index] != 'object' ? index : choices[index].value;
            option_str += "<option value=\"" + val + '" ';
            if (
                (Array.isArray(self.selected) && self.selected.indexOf(index) != -1)
                || (self.selected != '' && self.selected == index)
            ) {
                option_str += 'selected="selected" ';
            }

            if(typeof choices[index] != 'object') {
                option_str += '>' + choices[index] + '</option>';
            }
            else{
                option_str += '>' + (choices[index].label || humanize(index)) + '</option>';
            }
        });

        return str + option_str + '</select>';
    }

    renderExpanded(){
        var str = '<div id="' + this.options.id + '" ';

        var additional = this.options.additional;
        Object.keys(additional).forEach(function(key){
            if(key == '_keys'){
                return;
            }
            str += key + '="' + additional[key] + '" ';
        });
        str += ">";

        var choices = this.options.choices;
        var self = this;
        var i = 0;
        var type = this.field.vars.multiple ? 'checkbox' : 'radio';
        delete choices['_keys'];
        Object.keys(choices).forEach(function(index){
            var selected = '';

            if(
                (Array.isArray(self.selected) && self.selected.indexOf(index) != -1)
                || (self.selected != '' && self.selected == index)
            ){
                selected = 'checked="checked"';
            }

            str += '<input type="' + type+'" '
                + 'id="' + self.field.vars.id + '_' + i + '" '
                + 'name="' + self.field.vars.full_name + '" '
                + 'value="' + choices[index].value + '" '
                + selected
                + '/>';

            str += '<label ' + (self.options.required ? 'class="required" ' : '')
                + 'for="' + (self.field.vars.id + '_' + i) + '">'
                + (typeof choices[index] == 'object' ? (choices[index].label || humanize(index)) : choices[index])
                + '</label>';
            i++;
        });
        str += '</div>';
        return str;
    }
}


/*
 * Tag <button>
 */
class TagButton{
    constructor(field, options={}) {
        this.options = {
            id: options && options.id ? options.id : field.vars.id,
            name: field.vars.full_name,
            type: field.vars.block_prefixes[1] || '',
            label: options && options.label ? options.label : (field.vars.label || ''),
            additional: _.merge({}, field.vars.attr, options.attr)
        };
    }

    render(){
        var html =  '<button ';
        if(this.options.type){
            html += 'type="' + this.options.type +'" ';
        }

        html += 'id="' + this.options.id + '" '
            + 'name="' + this.options.name + '" ';

        var attr = this.options.additional;
        delete attr['_keys'];
        Object.keys(attr).forEach(function(key){
            html += key + '="' + attr[key] + '" ';
        });
        html += '>';
        return html + this.options.label + '</button>';
    }
}


/*
 * Private methods
 */

function humanize(text){
    //ucfirst(strtolower(trim(preg_replace(array('/([A-Z])/', '/[_\s]+/'), array('_$1', ' '), $text))))
    text = text.replace(/([A-Z])/g, '_$1').replace(/[_\s]+/g, ' ')
        .replace(/^\s+/, '')
        .replace(/\s+$/, '').toLowerCase();
    text = text.charAt(0).toUpperCase() + text.slice(1);
    return text;
}

module.exports = FormGenerator;