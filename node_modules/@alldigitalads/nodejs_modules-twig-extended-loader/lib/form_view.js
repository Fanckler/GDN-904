class FormView {
    constructor(data) {
        let isMainForm = data.isMainForm !== undefined ? data.isMainForm : true;

        Object.assign(this, data);

        let self = this;

        if(Array.isArray(this.vars.attr)){
            this.vars.attr = {};
        }

        if(this.children !== undefined) {
            if(
                isMainForm
                && (
                    !this.vars.attr['data-id']
                    || (this.vars.attr['data-id'] && !this.children['_formId'])
                )
            ){
                let formId = this.vars.attr['data-id'] || Math.floor(Date.now()*Math.random());
                this.vars.attr['data-id'] = formId;
                this.children['_formId'] = {
                    vars: {
                        value: formId,
                        attr: {},
                        form: this,
                        id: this.vars.id + '__formId',
                        name: '_formId',
                        full_name: this.vars.name + '[_formId]',
                        disabled: false,
                        label: null,
                        label_format: null,
                        multipart: false,
                        block_prefixes: ['form', 'hidden', '_' + this.vars.id + '__formId'],
                        unique_block_prefix: `_${this.vars.id}__formId`,
                        translation_domain: this.vars.translation_domain,
                        errors: [],
                        required: true,
                        label_attr: {},
                        compound: false
                    },
                    parent: null,
                    children: {},
                    rendered: false,
                    methodRendered: false
                }
            }

            if(!Array.isArray(this.children)) {
                Object.keys(this.children).forEach((field) => {
                    let fieldObj = self.children[field];
                    fieldObj.isMainForm = false;
                    Object.defineProperty(self, field, {
                        value: new FormView(fieldObj),
                        enumerable: true
                    });
                });
            }
            else{
                Object.values(this.children).forEach((fieldObj) => {
                    fieldObj.isMainForm = false;
                    Object.defineProperty(self, fieldObj.vars.id, {
                        value: new FormView(fieldObj),
                        enumerable: true
                    });
                });
            }

            delete(this['children']);
        }

        Object.defineProperties(this, {
            vars: {
                enumerable: false
            },
            rendered: {
                value: false,
                enumerable: false,
                writable: true,
            },
            methodRendered: {
                value: false,
                enumerable: false,
                writable: true,
            },
            parent: {
                enumerable: false
            },
            isMainForm: {
                value: isMainForm,
                enumerable: false
            },
            type: {
                value: this.vars.block_prefixes.length > 1 ? this.vars.block_prefixes[this.vars.block_prefixes.length-2] : null
            },
            action: {
                value: this.vars.action,
                enumerable: false
            }
        });
    }
}

module.exports = FormView;
