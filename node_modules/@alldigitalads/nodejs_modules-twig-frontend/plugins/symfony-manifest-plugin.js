'use strict';

const _ = require('lodash');
const pathUtils = require('path');
const glob = require('glob');
const fs = require('fs');

class SymfonyManifestPlugin{
    constructor(options={}){
        this.options = _.merge({
            sourcePath: '',
            templatesPath: '',
            translatePath: '',
            renderList: [],
            globalVendor: false,
            splitChunks: false,
            exclude: []
        }, options);
    }

    apply(compiler){
        compiler.hooks.done.tapAsync('SymfonyManifestPlugin', (compilation, callback) => {
            var entries = compilation.compilation.chunks.reduce((reduce, item)=>{
                reduce.push(item.name || item.id);
                return reduce;
            }, []);

            var result = {
                sourcePath: this.options.sourcePath,
                translate: this.options.translatePath ? require(process.cwd() + '/' + this.options.translatePath) : {},
                resources: entries,
                renderList: this.options.renderList,
            };

            if(typeof this.options.templatesPath != ''){
                result['templates'] = [
                    this.options.templatesPath.replace(new RegExp('^'+this.options.sourcePath+'/'), ''),
                    ...glob.sync(
                            this.options.templatesPath+'/*',
                            {
                                root: process.cwd()+'/'+this.options.sourcePath,
                                nomount: true,
                                ignore: this.options.exclude
                            }
                        )
                        .filter((file) => {
                            return fs.statSync(file).isDirectory();
                        })
                        .map(file => {
                            return file.replace(new RegExp('^'+this.options.sourcePath+'/'), '');
                        })
                ];
            }

            if (this.options.globalVendor !== false && typeof this.options.globalVendor == 'string') {
                result['globalVendor'] = this.options.globalVendor;
                result['splitChunks'] = true;
            }
            else {
                result['splitChunks'] = this.options.splitChunks;
            }

            fs.writeFileSync(process.cwd()+'/symfony_manifest.json', JSON.stringify(result, '', 4));
            callback();
        });
    }
};

module.exports = SymfonyManifestPlugin;