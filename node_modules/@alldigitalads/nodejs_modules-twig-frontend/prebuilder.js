'use strict';

const TwigCompilator = require('./index');
const pathUtils = require('path');
const glob = require('glob');
const fs = require('fs');
const fse = require('fs-extra');
const webpack = require('webpack');
const autoprefixer = require('autoprefixer');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const DeleteUnusedEntriesLSPlugin = require('./plugins/delete-unused-entries-js-plugin');
const ReplaceResource = require('@alldigitalads/nodejs_modules-replace-resource-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const HtmlWebpackInlineSourcePlugin = require('html-webpack-inline-source-plugin');
const ExtractCssPlugin = require('extract-text-webpack-plugin');

let rootPath = process.cwd();
let devPath;
let tag_rules = [
    {
        open_tag: '{%',
        close_tag: '%}',
        open_replace: '({|%)',
        close_replace: '(%|})',
        exclude_patern: /^(embed|extends|block|include|endblock|endembed|use|macro|endmacro)/
    },
    {
        open_tag: '{%-',
        close_tag: '-%}',
        open_replace: '({|%-)',
        close_replace: '(-%|})',
        exclude_patern: /^(embed|extends|block|include|endblock|endembed|use|macro|endmacro)/
    },
    {
        open_tag: '{{',
        close_tag: '}}',
        open_replace: '(#|#)',
        close_replace: '(&|&)',
    },
    {
        open_tag: '{{-',
        close_tag: '-}}',
        open_replace: '({|{-)',
        close_replace: '(-}|})',
    }
];

class TwigPrebuilder extends TwigCompilator {
    constructor(options){
        super(options);
    }

    getWebpackPrebuildConfig() {
        fse.copySync(this.options.templatePath, this.options.templatePath+'_copy');
        let files = glob.sync(this.options.templatePath+'_copy/**/*.twig', {nodir: true});

        files.forEach(file => {
            stashTwigTags(file, tag_rules);
        });

        this.options.templatePath += '_copy';

        return {
            entry: _makeEntries(this.options),
            output: this.options.output,
            plugins: _makePlugins(this.options),
            module: {
                rules: [
                    {
                        test: /\.js$/,
                        use: {
                            loader: 'babel-loader',
                            options: {
                                presets: ['@babel/preset-env']
                            }
                        }
                    },
                    {
                        test: /\.css$/,
                        use: ExtractCssPlugin.extract({
                            fallback: "style-loader",
                            use: [{
                                loader: "css-loader",
                            }, {
                                loader: 'postcss-loader',
                                options: {
                                    plugins: [
                                        autoprefixer
                                    ]
                                }
                            }]
                        })
                    },
                    {
                        test: /\.s[ac]ss$/,
                        use: ExtractCssPlugin.extract({
                            fallback: 'style-loader',
                            use: [{
                                loader: "css-loader",
                            },{
                                loader: 'postcss-loader',
                                options: {
                                    plugins: [
                                        autoprefixer
                                    ]
                                }
                            },
                                'sass-loader'
                            ]
                        })
                    },
                    {
                        test: /\.(ttf|woff|woff2|eot)$/,
                        use: [{
                            loader: 'file-loader',
                            options: {
                                name: false
                            }
                        }]
                    },
                    {
                        test: /\.(jpg|jpeg|gif|png|svg|ico)$/,
                        use: [{
                            loader: 'file-loader',
                            options: {
                                name: 'images/[name].[ext]'
                            }
                        }]
                    },
                    {
                        test: /\.(mp4|webm|ogv)$/,
                        use: [{
                            loader: 'file-loader',
                            options: {
                                name: false
                            }
                        }]
                    },
                    {
                        test: /\.(mp3|wav|aiff|ogg|oga|mogg|wma)$/,
                        use: [{
                            loader: 'file-loader',
                            options: {
                                name: false
                            }
                        }]
                    },
                    {
                        test: /\.twig$/,
                        use: [{
                            loader: '@alldigitalads/nodejs_modules-twig-extended-loader',
                            options: {
                                domain: this.options.domain,
                                templateRoot: pathUtils.resolve(rootPath, this.options.templatePath),
                                testDataRoot: '',
                                fixtures: {},
                                routerRules: {},
                                transMessages: {},
                            }
                        }]
                    }
                ]
            },
            devServer: this.options.devServer
        }
    }
}

function _makeEntries(options){
    var entries = {};
    var noJsEntries = [];
    var env = process.env.NODE_ENV !== undefined ? process.env.NODE_ENV : 'development';

    //Assets => Entry
    var templates = glob.sync(options.templatePath+'/**/*.twig', {nodir: true});
    var assets = [];
    templates.forEach(function(template){
        var source = fs.readFileSync(template, {encoding: 'utf8'});
        var matches = source.match(/asset\(('|")([^'"]+)\1\)/g);
        if(matches !== null){
            matches.forEach(function(match){
                assets.push(match.replace(/asset\(('|")([^'"]+)\1\)/, '$2'));
            });
        }
    });

    assets.forEach(function(chunk){
        if(/\.(s[ac]ss|js|css)$/.test(chunk)){
            entries[chunk.replace(/\.(s[ac]ss|css|js)$/, '')] = options.sourcePath+'/'+chunk;
        }
        else{
            entries[chunk] = options.sourcePath+'/'+chunk;
        }

        if(!/\.js$/.test(chunk) && options.noJsEntries.indexOf(chunk) == -1){
            options.noJsEntries.push(chunk.replace(/\.(s[ac]ss|css)$/, ''));
        }
    });

    options.entries = entries;

    return entries;
}

function _makePlugins(options){
    var plugins = [
        new CleanWebpackPlugin(options.output.path, {verbose: true, allowExternal: true}),
        new DeleteUnusedEntriesLSPlugin(options.noJsEntries),
        new webpack.ProvidePlugin(options.provide),
        new webpack.DefinePlugin(options.define),
        new ExtractCssPlugin({
            filename: '[name].css',
        }),
    ];

    var templates = typeof options.renderList == 'object'
        ? options.renderList
        : require(pathUtils.resolve(rootPath, options.renderList));

    Object.keys(templates).forEach(function(template){
        plugins.push(new HtmlWebpackPlugin({
            chunks: options.entries,
            filename: template,
            template: options.templatePath+'/'+template,
            inlineSource: '.(css|s[ac]ss)$',
        }));
    });


    plugins.push(new ReplaceResource({
        inlineCss: true,
        inlineCssOptions: {
            preserveImportant: true,
            applyAttributesTableElements: false
        },
        rules_replace: [
            {
                open_tag: '{%',
                close_tag: '%}',
                open_replace: '\\({\\|%\\)',
                close_replace: '\\(%\\|}\\)',
            },
            {
                open_tag: '{%-',
                close_tag: '-%}',
                open_replace: '\\({\\|%-\\)',
                close_replace: '\\(-%\\|}\\)',
            },
            {
                open_tag: '{{',
                close_tag: '}}',
                open_replace: '\\(#\\|#\\)',
                close_replace: '\\(&\\|&\\)',
            },
            {
                open_tag: '{{-',
                close_tag: '-}}',
                open_replace: '\\({\\|{-\\)',
                close_replace: '\\(-}\\|}\\)',
            }
        ]
    }));
    plugins.push(new HtmlWebpackInlineSourcePlugin());


    return [...plugins, ...options.plugins];
}

function _getRelativeFilename(root, filename){
    var fullPath = pathUtils.resolve(root, filename);
    return fullPath.replace(devPath+pathUtils.sep, '').replace(/\\/g, '/');
}

let stashTwigTags = (path, rules) => {
    rules = rules || [];
    if(!rules.length){
        return;
    }

    let source = fs.readFileSync(path, {encoding: 'utf8'});

    rules.forEach(rule => {
        if(typeof rule !== 'object'){
            return;
        }
        let open_tag = rule.open_tag,
            close_tag = rule.close_tag,
            open_replace = rule.open_replace,
            close_replace = rule.close_replace,
            exclude = rule.exclude_patern ? new RegExp(rule.exclude_patern) : null;

        let open_regex = new RegExp(open_tag, 'ig'),
            close_regex = new RegExp(close_tag, 'ig'),
            found = null, starts=[], ends = [];

        //Позиции открывающих и закрывающих тегов
        while((found = open_regex.exec(source)) != null){
            starts.push(open_regex.lastIndex);
        }
        while((found = close_regex.exec(source)) != null){
            ends.push(close_regex.lastIndex);
        }

        //Уровняем массивы и перевернем
        if(starts.length < ends.length){
            console.warn('Invalid close tags count in '+path);
            ends = ends.slice(0, starts.length);
        }
        else if(ends.length < starts.length){
            console.warn('Invalid open tags count in '+path);
            starts = starts.slice(0, ends.length);
        }

        starts.reverse();
        ends.reverse();

        //Заменим теги двигаясь по строке в обратном порядке.

        for(let i=0; i<ends.length; i++){
            let code = source.substring(starts[i], ends[i]).trim();
            if(exclude && exclude.test(code)){
                continue;
            }

            //Меняем закрывающий тег
            source = source.substring(0, ends[i]-close_tag.length) + close_replace + source.slice(ends[i]);
            //Меняем открывающий тег
            source = source.substring(0, starts[i]-open_tag.length) + open_replace + source.slice(starts[i]);
        }
    });

    fse.outputFileSync(path, source);
}

module.exports = TwigPrebuilder;